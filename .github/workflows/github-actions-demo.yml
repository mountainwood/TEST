name: GitHub Actions Demo
on:
  #tester-c
  #pull_request:
    #types: [opened, synchronize, labeled]
  push:
    branches:
        - master
        - '**'
  workflow_dispatch:
    inputs:
      force_build_docker:
        description: 'force build docker'
        required: false
        default: 'false'
        
        
        
        
        
concurrency: 
  # if the workflow have same concurrency group, previous one will be cancel2
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  BUILD_VERSION: 'v${{ github.RUN_NUMBER }}-${{ github.REF_NAME }}-act-az'
  GIT_ORIGIN: '${{ github.SERVER_URL }}'
  CUR_REPO: '${{ github.REPOSITORY  }}'
  CRED: '${{ secrets.GITHUB_TOKEN }}'
  EE_KKY_CR: '${{ secrets.ee_kky.EE_KKY_CR }}'
  MY_TT_KEY: '${{ secrets.MY_TT_KEY }}'
  ppp: '${{ secrets.ee_kky.PPP }}'
  
  BUILD_NAME: 'aws.registry.trendmicro.com/mtdis'
  DOCKER_PROXY: "aws.registry.trendmicro.com/etscache/"
  
  
jobs: 
  get_pr_number:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: attmp
        run: |
          echo " github.RUN_ATTEMPT   - "${{ github.RUN_ATTEMPT }} 
      - name: get pr number
        run: |
          # get all open pr number
          find_all_pr=$(curl --location --request GET "${{ github.api_url }}/repos/${{ github.repository }}/pulls?state=open&per_pageinteger=100" \
            --header "Authorization: token ${{ github.token }}" \
            --header "Accept: application/vnd.github+json")
          info=$(echo "$find_all_pr" | jq '.')
          pr_number_open_series=$(echo "$find_all_pr" | jq '.[].number')
          target_syntax=$(echo "$find_all_pr" | jq '.[] | {repo:.url, number:.number, sha:.head.sha}')  
          target=$(echo "$find_all_pr" | jq '.[] | select(.head.sha=="${{ github.sha }}")')
          pr_number=$(echo "$find_all_pr" | jq '.[] | select(.head.sha=="${{ github.sha }}") | .number')   
          echo "pr_number_open_series ===>"$pr_number_open_series
          echo "target ===>"$target
          echo "compare information ===>"${{ github.sha }}
          echo "pr_number ===>"${pr_number}
          #echo "info ===>"$info
          echo "${{ env.GIT_ORIGIN }}/api/v3/repos/${{ env.CUR_REPO }}/issues/$pr_number/comments"
          curl -vvv '${{ env.GIT_ORIGIN }}/api/v3/repos/${{ env.CUR_REPO }}/issues/${pr_number}/comments' -H 'Authorization: token ${{ env.CRED }}' -H 'Content-Type: application/vnd.github.VERSION.full' -d '{"body": "Your Message to Comment"}'
      - name: print pr number
        run: |
          echo "pr_number ===>"$pr_number
      - name: Comment PR publish info by API
        run: |
          curl -vvv '${{ env.GIT_ORIGIN }}/api/v3/repos/${{ env.CUR_REPO }}/issues/$pr_number/comments' -H 'Authorization: token ${{ env.CRED }}' -H 'Content-Type: application/vnd.github.VERSION.full' -d '{"body": "Your Message to Comment"}'
        
  force_build_setup:
    runs-on: ubuntu-latest
    outputs:
      force_build_var: ${{ steps.set_force_build_var.outputs.force_build_var }}
    steps:
      - name: Decide force_build_var
        id: set_force_build_var
        run: |
          if [ ${{ github.event_name }} = "push" ]
          then
            echo "::set-output name=force_build_var::false" 
          elif [ ${{ github.event_name }} = "workflow_dispatch" ]
          then
            echo "::set-output name=force_build_var::${{ github.event.inputs.force_build_docker }}"
          fi
  docker_tag_generate:
    runs-on: ubuntu-latest
    outputs:
      DOCKER_TAG: ${{ steps.set_docker_tag_generate.outputs.docker_tag }}
    steps:
      - name: new_docker_tag_to_env
        id: set_docker_tag_generate
        run: |
          docker_tag_info=$(echo ${{ env.BUILD_VERSION }} | sed 's/\//-/g' | sed 's/_/-/g')
          echo "DOCKER_TAG_NEW=${docker_tag_info}" >> $GITHUB_ENV
          echo "::set-output name=docker_tag::${docker_tag_info}"
      - name: print new docker tag
        run: |
          echo ${{ needs.docker_tag_generate.outputs.DOCKER_TAG }}
  env_setup:
    needs: docker_tag_generate
    runs-on: ubuntu-latest
    outputs:
      ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}
    steps:
      - name: Decide the head_ref
        id: set_ref_branch
        run: |
          echo "workflow-github-ref ===>"${{ github.workflow }}-${{ github.ref }}
          echo "DOCKER_TAG ===>"${{ needs.docker_tag_generate.outputs.docker_tag }}
          echo "Trigger event: ${{ github.event_name }}"
          echo "The ref will be checkout: ${{ github.ref }}"
          # get REF_BRANCH from different trigger event
          if [ ${{ github.event_name }} = "pull_request" ]
          then
            echo "::set-output name=ref_branch::${{ github.head_ref }}"
          elif [ ${{ github.event_name }} = "push" ]
          then
            echo "::set-output name=ref_branch::${{ github.ref_name }}"
          elif [ ${{ github.event_name }} = "workflow_dispatch" ]
          then
            echo "::set-output name=ref_branch::${{ github.ref_name }}"
          fi
      - name: Check the ref_branch
        run: |
          echo "ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}"
  get_changefile:
    needs: env_setup
    runs-on: ubuntu-latest
    outputs:
      needToBuildAndPublish: ${{ steps.filecheck.outputs.needToBuildAndPublish }}
    steps:
      - uses: AutoModality/action-clean@v1 # must clean workspace
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changefile
        id: filecheck
        run: |
          changeFiles=$(git diff --name-only origin/master...origin/${{ needs.env_setup.outputs.ref_branch }})
          echo "Trigger event: ${{ github.event_name }}"
          echo "changeFiles ===>"$changeFiles
          if [[ $changeFiles != '' ]] 
          then
            for file_name in $changeFiles
            do
              echo "file_name ===>"$file_name
              if [[ $file_name != deploy/* ]]
              #if [[ $file_name = .github/* ]]
              then
                echo "file_name_check_deploy ===>"$file_name
                echo "file_name is changed: ${file_name}"
                echo "::set-output name=needToBuildAndPublish::true"
                exit 0
              fi
            done
          else
            if [[ ${{ needs.env_setup.outputs.ref_branch }} == 'master' ]]
            then
            echo "Merge to Master. Excute Build and Push."
            echo 'v${{ github.RUN_NUMBER }}-${{ github.REF_NAME }}-act-az'
            echo "::set-output name=needToBuildAndPublish::true"
            exit 0
            fi
          fi
  Docker-build-fronend-build:
    needs: [docker_tag_generate,get_changefile, force_build_setup]
    runs-on: ubuntu-latest
    steps:
      - name: Run tf scan
        run: |
          if ${{ needs.get_changefile.outputs.needToBuildAndPublish == 'true' }} || ${{ needs.force_build_setup.outputs.force_build_var == 'true' }}
          then
            echo "needToBuildAndPublish ===>"${{ needs.get_changefile.outputs.needToBuildAndPublish }}
            echo "force_build_var ===>"${{ needs.force_build_setup.outputs.force_build_var }}
            echo "Start fronend build docker"
            echo "DOCKER_TAG ===>"${{ needs.docker_tag_generate.outputs.docker_tag }}
          fi
  Docker-build-backend-build:
    needs: [docker_tag_generate,get_changefile, force_build_setup]
    runs-on: ubuntu-latest
    steps:
      - name: Run tf scan
        run: |
          if ${{ needs.get_changefile.outputs.needToBuildAndPublish == 'true' }} || ${{ needs.force_build_setup.outputs.force_build_var == 'true' }}
          then
            echo "needToBuildAndPublish ===>"${{ needs.get_changefile.outputs.needToBuildAndPublish }}
            echo "force_build_var ===>"${{ needs.force_build_setup.outputs.force_build_var }}
            echo "Start backend build docker"
            echo "DOCKER_TAG ===>"${{ needs.docker_tag_generate.outputs.docker_tag }}
          fi
  Publish-steps:
    needs: [Docker-build-fronend-build, Docker-build-backend-build]
    runs-on: ubuntu-latest
    steps:
      - name: Publish fronend
        run: |
          echo "Publish Docker-build-fronend-build"
      - name: Publish backend
        run: |
          echo "Publish Docker-build-backend-build"
  Git-tag:
    environment: ee_kky
    needs: Publish-steps
    runs-on: ubuntu-latest
    steps:
      - name: Git tag
        run: |
          echo "Git tag"
          echo ${{ secrets.MY_TT_KEY }}
          echo ${{ secrets.PPP }}
      - name: Checkout 
        uses: actions/checkout@v3
        with:
          repository: mountainwood/TEST
          fetch-depth: 0
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
           registry: github.com/
           username: ${{ secrets.NAME }}
           password: ${{ secrets.POI }}
      - name: Github API
        run: |
          curl -vvv '${{github.SERVER_URL}}/${{ github.REPOSITORY }}/git/refs' \
          -H 'Content-Type: application/json' \
          -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
          -X POST \
          -d '{"ref": "refs/tags/${{ env.BUILD_VERSION }}", "sha": "${{ github.sha }}"}'
  Comment-PR-publishinfo:
    environment: ee_kky
    needs: Git-tag
    runs-on: ubuntu-latest
    steps:
      - name: Comment-PR-publishinfo
        run: |
          echo "Comment-PR-publishinfo"
      - name: Checkout 
        uses: actions/checkout@v3
        with:
          repository: ${{ github.REPOSITORY }}
          fetch-depth: 0
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
           registry: github.com/
           username: ${{ secrets.NAME }}
           password: ${{ secrets.POI }}
      - name: Github API Comment PR publish info ack search_result
        run: |
          curl -vvv -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' '${{github.SERVER_URL}}/api/v3/search/issues?q=${{ github.sha }}&type=Issues' 
      - name: Get Pull Request Number
        id: pr
        run: echo "::set-output name=pull_request_number::$(gh pr view --json number -q .number || echo "")"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Pull Request Number method two
        run: |
          echo github.event.number = ${{ github.event.number  }}
          echo github.event.pull_request.number = ${{ github.event.pull_request.number }}
          echo github.event.issue.number = ${{ github.event.issue.number }}
      - name: Comment PR publish info by API
        run: |
          curl -vvv '${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/issues/${{ github.event.pull_request.number }}/comments' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' -H 'Content-Type: application/vnd.github.VERSION.full' -d '{"body": "Your Message to Comment"}'
  get-deploy-tag:
    needs: [get_changefile,Publish-steps,Git-tag,Comment-PR-publishinfo]
    runs-on: ubuntu-latest
    steps:
      - name: Show-Deploy-Information
        run: |
          echo 'Build result'
          echo 'Tag: '${{ env.BUILD_VERSION }}
          echo 'Branch Name: '${{ github.REF_NAME }}
          echo 'Build Number: '${{ github.RUN_NUMBER }}
          echo 'ref_name ===>'${{ github.ref_name }}
          echo 'merged  ===>'${{ github.event.pull_request.merged }}
          echo 'need  ===>'${{ needs.get_changefile.outputs.needToBuildAndPublish }}
  Trigger-Int-Site-Backend-Deploy:
    needs: [get_changefile,Publish-steps,Git-tag,Comment-PR-publishinfo]
    if:  github.ref_name == 'master' && needs.get_changefile.outputs.needToBuildAndPublish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger-Int-Site-Backend-Deploy
        run: |
          echo PR #${{ github.event.number }} has been merged
          echo "equals expected: true ===> actual: needToBuildAndPublish"
          echo "allof branch name ===> master"


            
          
          
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: print flow
        run: |
          echo "Build flow"
          echo " github.action  - "${{ github.action }}
          echo " github.action_path  - "${{ github.action_path }}
          echo " github.ACTION_REPOSITORY  - "${{ github.ACTION_REPOSITORY }}
          echo " github.ACTIONS  - "${{ github.ACTIONS }}
          echo " github.ACTOR  - "${{ github.ACTOR }}
          echo " github.API_URL  - "${{ github.API_URL }}
          echo " github.BASE_REF  - "${{ github.BASE_REF }}
          echo " github.ENV " - ${{ github.ENV }}
          echo " github.EVENT_NAME  - "${{ github.EVENT_NAME }}
          echo " github.EVENT_PATH  - "${{ github.EVENT_PATH }}
          echo " github.GRAPHQL_URL  - "${{ github.GRAPHQL_URL }}
          echo " github.HEAD_REF  - "${{ github.HEAD_REF }}
          echo " github.JOB  - "${{ github.JOB }}
          echo " github.PATH  - "${{ github.PATH }}
          echo " github.REF  - "${{ github.REF }}
          echo " github.REF_NAME  - "${{ github.REF_NAME }}
          echo " github.GITHUB_REF_NAME  - "${{ github.GITHUB_REF_NAME }}
          echo " github.REF_TYPE   - "${{ github.REF_TYPE }} 
          echo " github.REPOSITORY  - "${{ github.REPOSITORY }}
          echo " github.REPOSITORY_OWNER  - "${{ github.REPOSITORY_OWNER }}
          echo " github.RETENTION_DAYS  - "${{ github.RETENTION_DAYS }}
          echo " github.RUN_ATTEMPT   - "${{ github.RUN_ATTEMPT }} 
          echo " github.RUN_ID  - "${{ github.RUN_ID }}
          echo " github.RUN_NUMBER  - "${{ github.RUN_NUMBER }}
          echo " github.SERVER_URL   - "${{ github.SERVER_URL }} 
          echo " github.SHA  - "${{ github.SHA }}
          echo " github.STEP_SUMMARY  - "${{ github.STEP_SUMMARY }}
          echo " github.WORKSPACE  - "${{ github.WORKSPACE }}
          echo " runner.ARCH  - "${{ runner.ARCH }}
          echo " runner.NAME  - "${{ runner.NAME }}
          echo " github.OS  - "${{ github.OS }}
          echo " github.TEMP  - "${{ github.TEMP }}
          echo " runner.TOOL_CACHE  - "${{ runner.TOOL_CACHE }}
          echo "BUILD_VERSION_RAW = "v${{github.RUN_NUMBER}}-${{ github.REF_NAME }}-az
          echo "GIT_ORIGIN = "${{github.SERVER_URL}}
          echo "github.event.number = "${{ github.event.number  }}
          echo github.event.pull_request.number = ${{ github.event.pull_request.number }}
          echo github.event.issue.number = ${{ github.event.issue.number }}
      - name: Decide the head_ref
        id: set_ref_branch
        run: |
          echo "Trigger event: ${{ github.event_name }}"
          echo "The ref will be checkout: ${{ github.ref }}"
          # get REF_BRANCH from different trigger event
          if [ ${{ github.event_name }} = "pull_request" ]
          then
            echo "::set-output name=ref_branch::${{ github.head_ref }}"
          elif [ ${{ github.event_name }} = "workflow_dispatch" ]
          then
            echo "::set-output name=ref_branch::${{ github.ref_name }}"
          fi
      - name: Check the ref_branch
        run: |
          echo "ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}"
      - name: query origin or not
        run: 
          info=$(git branch -r)
          echo $(info)
      - name: git branch a
        run: 
          info=$(git branch -a)
          echo $(info)
      - name: symbolic
        run: 
          info=$(git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/master)
          echo $(info)

