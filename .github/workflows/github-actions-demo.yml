name: GitHub Actions Demo
on:
  pull_request:
    types: [opened, synchronize, labeled]
  push:
    branches:
        - master

env:
  BUILD_VERSION: 'v22-p-test-build-docker-az'
  BUILD_NAME: 'aws.registry.trendmicro.com/mtdis'
  DOCKER_PROXY: "aws.registry.trendmicro.com/etscache/"
  
  
jobs:
  force_build_setup:
    runs-on: ubuntu-latest
    outputs:
      force_build_var: ${{ steps.set_force_build_var.outputs.force_build_var }}
    steps:
      - name: Decide force_build_var
        id: set_force_build_var
        run: |
          echo "::set-output name=force_build_var::false"
        
  env_setup:
    runs-on: ubuntu-latest
    outputs:
      ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}
    steps:
      - name: Decide the head_ref
        id: set_ref_branch
        run: |
          echo "Trigger event: ${{ github.event_name }}"
          echo "The ref will be checkout: ${{ github.ref }}"
          # get REF_BRANCH from different trigger event
          if [ ${{ github.event_name }} = "pull_request" ]
          then
            echo "::set-output name=ref_branch::${{ github.head_ref }}"
          elif [ ${{ github.event_name }} = "push" ]
          then
            echo "::set-output name=ref_branch::${{ github.head_ref }}"
          elif [ ${{ github.event_name }} = "workflow_dispatch" ]
          then
            echo "::set-output name=ref_branch::${{ github.ref_name }}"
          fi
      - name: Check the ref_branch
        run: |
          echo "ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}"
  get_changefile:
    needs: env_setup
    runs-on: ubuntu-latest
    outputs:
      needToBuildAndPublish: ${{ steps.filecheck.outputs.needToBuildAndPublish }}
    steps:
      - uses: AutoModality/action-clean@v1 # must clean workspace
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changefile
        id: filecheck
        run: |
          changeFiles=$(git diff --name-only origin/master...origin/${{ needs.env_setup.outputs.ref_branch }})
          echo "changeFiles ===>"$changeFiles
          for file_name in $changeFiles
          do
            echo "file_name ===>"$file_name
            #if [[ $file_name = deploy/* ]]
            if [[ $file_name = .github/* ]]
            then
              echo "file_name_check_deploy ===>"$file_name
              echo "file_name is changed: ${file_name}"
              echo "::set-output name=needToBuildAndPublish::true"
              exit 0
            fi
          done
  Docker-build-fronend-build:
    needs: [get_changefile, force_build_setup]
    runs-on: ubuntu-latest
    steps:
      - name: Run tf scan
        run: |
          if ${{ needs.get_changefile.outputs.needToBuildAndPublish == 'true' }} || ${{ needs.force_build_setup.outputs.force_build_var == 'true' }}
          then
            echo "needToBuildAndPublish ===>"${{ needs.get_changefile.outputs.needToBuildAndPublish }}
            echo "force_build_var ===>"${{ needs.force_build_setup.outputs.force_build_var }}
            echo "Start fronend build docker"
          fi
  Docker-build-backend-build:
    needs: [get_changefile, force_build_setup]
    runs-on: ubuntu-latest
    steps:
      - name: Run tf scan
        run: |
          if ${{ needs.get_changefile.outputs.needToBuildAndPublish == 'true' }} || ${{ needs.force_build_setup.outputs.force_build_var == 'true' }}
          then
            echo "needToBuildAndPublish ===>"${{ needs.get_changefile.outputs.needToBuildAndPublish }}
            echo "force_build_var ===>"${{ needs.force_build_setup.outputs.force_build_var }}
            echo "Start backend build docker"
          fi
  Publish-steps:
    needs: [Docker-build-fronend-build, Docker-build-backend-build]
    runs-on: ubuntu-latest
    steps:
      - name: Publish fronend
        run: |
          echo "Publish Docker-build-fronend-build"
      - name: Publish backend
        run: |
          echo "Publish Docker-build-backend-build"
  Git-tag:
    needs: Publish-steps
    runs-on: ubuntu-latest
    steps:
      - name: Git tag
        run: |
          echo "Git tag"
  Comment-PR-publishinfo:
    needs: Git-tag
    runs-on: ubuntu-latest
    steps:
      - name: Comment-PR-publishinfo
        run: |
          echo "Comment-PR-publishinfo"
  Trigger-Int-Site-Backend-Deploy:
    needs: [get_changefile,Publish-steps,Git-tag,Comment-PR-publishinfo]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger-Int-Site-Backend-Deploy
        run: |
          if ${{ github.event.pull_request.merged == 'true' }} && ${{ needs.get_changefile.outputs.needToBuildAndPublish == 'true' }}
          then
            echo PR #${{ github.event.number }} has been merged
            echo "equals expected: true ===> actual: needToBuildAndPublish"
            echo "allof branch name ===> master"
            echo "Trigger-Int-Site-Backend-Deploy"
          fi

            
          
          
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      - name: print flow
        run: |
          echo "Build flow"
          echo " github.action  - "${{ github.action }}
          echo " github.action_path  - "${{ github.action_path }}
          echo " github.ACTION_REPOSITORY  - "${{ github.ACTION_REPOSITORY }}
          echo " github.ACTIONS  - "${{ github.ACTIONS }}
          echo " github.ACTOR  - "${{ github.ACTOR }}
          echo " github.API_URL  - "${{ github.API_URL }}
          echo " github.BASE_REF  - "${{ github.BASE_REF }}
          echo " github.ENV " - ${{ github.ENV }}
          echo " github.EVENT_NAME  - "${{ github.EVENT_NAME }}
          echo " github.EVENT_PATH  - "${{ github.EVENT_PATH }}
          echo " github.GRAPHQL_URL  - "${{ github.GRAPHQL_URL }}
          echo " github.HEAD_REF  - "${{ github.HEAD_REF }}
          echo " github.JOB  - "${{ github.JOB }}
          echo " github.PATH  - "${{ github.PATH }}
          echo " github.REF  - "${{ github.REF }}
          echo " github.REF_NAME  - "${{ github.REF_NAME }}
          echo " github.GITHUB_REF_NAME  - "${{ github.GITHUB_REF_NAME }}
          echo " github.REF_TYPE   - "${{ github.REF_TYPE }} 
          echo " github.REPOSITORY  - "${{ github.REPOSITORY }}
          echo " github.REPOSITORY_OWNER  - "${{ github.REPOSITORY_OWNER }}
          echo " github.RETENTION_DAYS  - "${{ github.RETENTION_DAYS }}
          echo " github.RUN_ATTEMPT   - "${{ github.RUN_ATTEMPT }} 
          echo " github.RUN_ID  - "${{ github.RUN_ID }}
          echo " github.RUN_NUMBER  - "${{ github.RUN_NUMBER }}
          echo " github.SERVER_URL   - "${{ github.SERVER_URL }} 
          echo " github.SHA  - "${{ github.SHA }}
          echo " github.STEP_SUMMARY  - "${{ github.STEP_SUMMARY }}
          echo " github.WORKSPACE  - "${{ github.WORKSPACE }}
          echo " runner.ARCH  - "${{ runner.ARCH }}
          echo " runner.NAME  - "${{ runner.NAME }}
          echo " github.OS  - "${{ github.OS }}
          echo " github.TEMP  - "${{ github.TEMP }}
          echo " runner.TOOL_CACHE  - "${{ runner.TOOL_CACHE }}
          echo "BUILD_VERSION_RAW = "v${{github.RUN_NUMBER}}-${{ github.REF_NAME }}-az
          echo "GIT_ORIGIN = "${{github.SERVER_URL}}
          echo "github.event.number = "${{ github.event.number  }}
          echo github.event.pull_request.number = ${{ github.event.pull_request.number }}
          echo github.event.issue.number = ${{ github.event.issue.number }}
      - name: Decide the head_ref
        id: set_ref_branch
        run: |
          echo "Trigger event: ${{ github.event_name }}"
          echo "The ref will be checkout: ${{ github.ref }}"
          # get REF_BRANCH from different trigger event
          if [ ${{ github.event_name }} = "pull_request" ]
          then
            echo "::set-output name=ref_branch::${{ github.head_ref }}"
          elif [ ${{ github.event_name }} = "workflow_dispatch" ]
          then
            echo "::set-output name=ref_branch::${{ github.ref_name }}"
          fi
      - name: Check the ref_branch
        run: |
          echo "ref_branch: ${{ steps.set_ref_branch.outputs.ref_branch }}"
      - name: query origin or not
        run: 
          info=$(git branch -r)
          echo $(info)
      - name: git branch a
        run: 
          info=$(git branch -a)
          echo $(info)
      - name: symbolic
        run: 
          info=$(git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/master)
          echo $(info)
          echo $(info)
